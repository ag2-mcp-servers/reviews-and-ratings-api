# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:04:18+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    RatingProductIdGetResponse,
    ReviewPostResponse,
    ReviewReviewIdGetResponse,
    ReviewReviewIdPatchRequest,
    ReviewReviewIdPatchResponse,
    ReviewsDeleteRequest,
    ReviewsGetResponse,
    ReviewsPostRequest,
    ReviewsPostResponse,
    SaveReviewRequest,
)

app = MCPProxy(
    contact={},
    description='\r\nReviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.\r\n\r\n## Rating\r\n\r\n- [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)\r\n\r\n## Review\r\n\r\n- [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)\r\n- [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)\r\n- [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)\r\n- [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)\r\n- [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)\r\n- [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)\r\n- [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)',
    title='Reviews and Ratings API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server URL',
            'url': 'https://{accountName}.myvtex.com/reviews-and-ratings/api',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL.',
                }
            },
        },
    ],
)


@app.get(
    '/rating/{productId}',
    description=""" Retrieves the rating of a specific product. """,
    tags=['product_rating_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_product_rating(
    product_id: str = Path(..., alias='productId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Product Rating
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/review',
    description=""" Creates a single review """,
    tags=['review_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def save_review(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SaveReviewRequest = ...,
):
    """
    Create a Review
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/review/{reviewId}',
    description=""" Deletes an existing review. """,
    tags=['review_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_review(
    review_id: str = Path(..., alias='reviewId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete Review
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/review/{reviewId}',
    description=""" Retrieves information of a product review by its ID. """,
    tags=['review_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_reviewby_review_id(
    review_id: str = Path(..., alias='reviewId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Review by Review ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/review/{reviewId}',
    description=""" Updates the information of a review. """,
    tags=['review_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def edit_review(
    review_id: str = Path(..., alias='reviewId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ReviewReviewIdPatchRequest = ...,
):
    """
    Update a Review
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/reviews',
    description=""" Deletes multiple reviews at once. """,
    tags=['review_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_multiple_reviews(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ReviewsDeleteRequest = None,
):
    """
    Delete Multiple Reviews
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reviews',
    description=""" Retrieves a list of reviews. """,
    tags=['review_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getalistof_reviews(
    search_term: str,
    from_: str = Query(..., alias='from'),
    to: str = ...,
    order_by: str = ...,
    status: bool = ...,
    product_id: str = ...,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get a list of Reviews
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reviews',
    description=""" Creates multiple reviews. """,
    tags=['review_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def save_multiple_reviews(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ReviewsPostRequest = ...,
):
    """
    Create Multiple Reviews
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
