# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:04:18+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class SaveMultipleReviewsRequest(BaseModel):
    approved: bool = Field(
        ..., description='If the review was approved (`true`) or not (`false`).'
    )
    id: Optional[str] = Field(None, description='Review ID.')
    productId: str = Field(..., description='Product ID.')
    rating: float = Field(..., description='Customer rating.')
    reviewerName: str = Field(..., description='Reviewer name.')
    text: str = Field(..., description="Review's text.")
    title: str = Field(..., description="Review's title.")
    verifiedPurchaser: bool = Field(
        ...,
        description='If the reviewer is a verified purchaser (`true`) or not (`false`).',
    )


class SaveReviewRequest(BaseModel):
    productId: str = Field(..., description='Product ID.')
    rating: int = Field(..., description='Customer rating.')
    reviewerName: str = Field(..., description='Reviewer name.')
    text: str = Field(..., description="Review's text.")
    title: str = Field(..., description="Review's title.")


class RatingProductIdGetResponse(BaseModel):
    average: Optional[float] = Field(
        None, description='Avarage rating of the product.', examples=[3.86]
    )
    totalCount: Optional[float] = Field(
        None, description='Total amount of ranting of the product.', examples=[7]
    )


class ReviewPostResponse(BaseModel):
    approved: Optional[bool] = Field(
        None, description='If the review was approved (`true`) or not (`false`).'
    )
    id: Optional[str] = Field(None, description='Review ID.')
    locale: Optional[str] = Field(None, description="Review's locale.")
    location: Optional[str] = Field(None, description="Review's origin location.")
    pastReviews: Optional[str] = Field(
        None, description='Past reviews of the same product.'
    )
    productId: Optional[str] = Field(None, description='Product ID.')
    rating: Optional[float] = Field(None, description='Customer rating.')
    reviewDateTime: Optional[str] = Field(None, description="Review's date and time.")
    reviewerName: Optional[str] = Field(None, description='Reviewer name.')
    searchDate: Optional[str] = Field(None, description="Review's search date.")
    shopperId: Optional[str] = Field(None, description='Shopper email.')
    sku: Optional[str] = Field(None, description='SKU ID.')
    text: Optional[str] = Field(None, description="Review's text.")
    title: Optional[str] = Field(None, description="Review's title.")
    verifiedPurchaser: Optional[bool] = Field(
        None,
        description='If the reviewer is a verified purchaser (`true`) or not (`false`).',
    )


class ReviewReviewIdGetResponse(BaseModel):
    approved: Optional[bool] = Field(
        None, description='If the review was approved (`true`) or not (`false`).'
    )
    id: Optional[str] = Field(None, description='Review ID.')
    locale: Optional[str] = Field(None, description="Review's locale.")
    location: Optional[str] = Field(None, description="Review's origin location.")
    pastReviews: Optional[str] = Field(
        None, description='Past reviews of the same product.'
    )
    productId: Optional[str] = Field(None, description='Product ID.')
    rating: Optional[float] = Field(None, description='Customer rating.')
    reviewDateTime: Optional[str] = Field(None, description="Review's date and time.")
    reviewerName: Optional[str] = Field(None, description='Reviewer name.')
    searchDate: Optional[str] = Field(None, description="Review's search date.")
    shopperId: Optional[str] = Field(None, description='Shopper email.')
    sku: Optional[str] = Field(None, description='SKU ID.')
    text: Optional[str] = Field(None, description="Review's text.")
    title: Optional[str] = Field(None, description="Review's title.")
    verifiedPurchaser: Optional[bool] = Field(
        None,
        description='If the reviewer is a verified purchaser (`true`) or not (`false`).',
    )


class ReviewReviewIdPatchRequest(BaseModel):
    locale: Optional[str] = Field(None, description="Review's locale.")
    productId: str = Field(..., description='Product ID.')
    rating: float = Field(..., description='Customer rating.')
    reviewerName: str = Field(..., description='Reviewer name.')
    shopperId: Optional[str] = Field(None, description='Shopper email.')
    text: str = Field(..., description="Review's text.")
    title: str = Field(..., description="Review's title.")
    verifiedPurchaser: Optional[bool] = Field(
        None,
        description='If the reviewer is a verified purchaser (`true`) or not (`false`).',
    )


class ReviewReviewIdPatchResponse(BaseModel):
    approved: Optional[bool] = Field(
        None, description='If the review was approved (`true`) or not (`false`).'
    )
    id: Optional[str] = Field(None, description='Review ID.')
    locale: Optional[str] = Field(None, description="Review's locale.")
    location: Optional[str] = Field(None, description="Review's origin location.")
    pastReviews: Optional[str] = Field(
        None, description='Past reviews of the same product.'
    )
    productId: Optional[str] = Field(None, description='Product ID.')
    rating: Optional[float] = Field(None, description='Customer rating.')
    reviewDateTime: Optional[str] = Field(None, description="Review's date and time.")
    reviewerName: Optional[str] = Field(None, description='Reviewer name.')
    searchDate: Optional[str] = Field(None, description="Review's search date.")
    shopperId: Optional[str] = Field(None, description='Shopper email.')
    sku: Optional[str] = Field(None, description='SKU ID.')
    text: Optional[str] = Field(None, description="Review's text.")
    title: Optional[str] = Field(None, description="Review's title.")
    verifiedPurchaser: Optional[bool] = Field(
        None,
        description='If the reviewer is a verified purchaser (`true`) or not (`false`).',
    )


class ReviewsDeleteRequest(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array of reviews IDs.')


class Datum(BaseModel):
    approved: Optional[bool] = Field(
        None, description='If the review was approved (`true`) or not (`false`).'
    )
    id: Optional[str] = Field(None, description='Review ID.')
    locale: Optional[str] = Field(None, description="Review's locale.")
    location: Optional[str] = Field(None, description="Review's origin location.")
    pastReviews: Optional[str] = Field(
        None, description='Past reviews of the same product.'
    )
    productId: Optional[str] = Field(None, description='Product ID.')
    rating: Optional[float] = Field(None, description='Customer rating.')
    reviewDateTime: Optional[str] = Field(None, description="Review's date and time.")
    reviewerName: Optional[str] = Field(None, description='Reviewer name.')
    searchDate: Optional[str] = Field(None, description="Review's search date.")
    shopperId: Optional[str] = Field(None, description='Shopper email.')
    sku: Optional[str] = Field(None, description='SKU ID.')
    text: Optional[str] = Field(None, description="Review's text.")
    title: Optional[str] = Field(None, description="Review's title.")
    verifiedPurchaser: Optional[bool] = Field(
        None,
        description='If the reviewer is a verified purchaser (`true`) or not (`false`).',
    )


class Range(BaseModel):
    from_: Optional[float] = Field(
        None, alias='from', description='Zero base starting record number.'
    )
    to: Optional[float] = Field(None, description='Zero base ending record number.')
    total: Optional[float] = Field(
        None, description='Total number of reviews on the list.'
    )


class ReviewsGetResponse(BaseModel):
    data: Optional[List[Datum]] = Field(None, description='Array of reviews.')
    range: Optional[Range] = Field(None, description="Range of the review's list.")


class ReviewsPostRequest(RootModel[List[SaveMultipleReviewsRequest]]):
    root: List[SaveMultipleReviewsRequest] = Field(..., description='')


class ReviewsPostResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='List of review IDs.')
